#!/usr/bin/python 
from __future__ import division
import numpy as np
import Bio
from Bio import SeqIO
from numpy import array
from numpy import mean
from numpy import cov
import numpy.linalg as linalg
from matplotlib import pyplot as plt

mylist = list()
for record in SeqIO.parse("HW2.fas", "fasta"):
	mylist.append(record.seq)
	print(record.seq)
	myarray = np.asarray(mylist) 
	print(myarray.shape) 

# define a matrix
X_std = myarray.view(np.uint8)
print(X_std)

mean_vec = np.mean(X_std, axis=0)
cov_mat = (X_std - mean_vec).T.dot((X_std - mean_vec)) / (X_std.shape[0]-1)
print('Covariance matrix \n%s' %cov_mat)

cov_mat = np.cov(X_std.T)

eig_vals, eig_vecs = np.linalg.eig(cov_mat)

print('Eigenvectors \n%s' %eig_vecs)
print('\nEigenvalues \n%s' %eig_vals)

for ev in eig_vecs.T:
    np.testing.assert_array_almost_equal(1.0, np.linalg.norm(ev))
print('Everything ok!')

#Make a list of (eigenvalue, eigenvector) tuples
eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]

# Sort the (eigenvalue, eigenvector) tuples from high to low
eig_pairs.sort(key=lambda x: x[0], reverse=True)

# Visually confirm that the list is correctly sorted by decreasing eigenvalues
print('Eigenvalues in descending order:')
for i in eig_pairs:
    print(i[0])

matrix_w = eig_vecs[:,:2]

print(matrix_w.shape)
print('Matrix W:\n', matrix_w)

Y = X_std.dot(matrix_w)
print(Y.shape)
# plt.scatter(X_std,Y)

